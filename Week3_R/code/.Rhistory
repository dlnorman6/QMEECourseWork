MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F))
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = F))
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = T, sep=";", stringsAsFactors = F)
head(MyData)
dim(MyData)
str(MyData)
fix(MyData) # visualise in table
fix(MyMetaData)
str(MyMetaData)
fix(MyMetaData)
fix(MyData) # visualise in table
MyData <- t(MyData)
head(MyData)
dim(MyData)
fix(MyData) # visualise in table
MyData[MyData == ""] = 0
colnames(MyData)
fix(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data
rownames(TempData) <- NULL # not essential
require(reshape2) # load the reshape2 package
?melt #check out the melt function
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"),
q
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.numeric(MyWrangledData[, "Count"])
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
str(MyWrangledData$Species)
install.packages("dplyr")
q
q()
densityplot(~(log(Prey.mass)/log(Predator.mass)) | Type.of.feeding.interaction, data=MyDF)
library(lattice)
densityplot(~(log(Prey.mass)/log(Predator.mass)) | Type.of.feeding.interaction, data=MyDF)
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
densityplot(~(log(Prey.mass)/log(Predator.mass)) | Type.of.feeding.interaction, data=MyDF)
densityplot(~log(Prey.mass/Predator.mass) | Type.of.feeding.interaction, data=MyDF)
densityplot(~(Prey.mass/Predator.mass) | Type.of.feeding.interaction, data=MyDF)
densityplot(~log(Prey.mass/Predator.mass) | Type.of.feeding.interaction, data=MyDF)
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
source("PP_Lattice.R")
source("PP_Lattice.R")
pdf("../results/Pred_Lattice.pdf", 11.7, 8.3) # Open blank pdf page
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF,
main="Predator mass by feeding interaction type")
graphics.off();
source("PP_Lattice.R")
source("PP_Lattice.R")
source("PP_Lattice.R")
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF, main="Predator mass by feeding interaction type")
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF,
    main="Predator mass by feeding interaction type")
graphics.off()
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF,
    main="Predator mass by feeding interaction type")
source("PP_Lattice.R")
source("PP_Lattice.R")
require(ggplot2)
qplot(Prey.mass, Predator.mass, data=MyDF)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF)
qplot(log(Prey.mass), log(Predator.mass), data=MyDF, colour=Type.of.feeding.interaction)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, shape = Type.of.feeding.interaction)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, size = 3) #with ggplot size mapping
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, size = I(3)) #no mapping
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, shape = 3) #will give error
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, shape= I(3))
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = Type.of.feeding.interaction, alpha = I(.5))
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = Type.of.feeding.interaction, alpha = .5)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, geom = c("point", "smooth"))
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, geom = c("point", "smooth")) + geom_smooth(method = "lm")
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, geom = c("point", "smooth"), 
      colour = Type.of.feeding.interaction) + geom_smooth(method = "lm")
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, geom = c("point", "smooth"),
      colour = Type.of.feeding.interaction) + geom_smooth(method = "lm",fullrange = TRUE)
qplot(Type.of.feeding.interaction, log(Prey.mass/Predator.mass), data = MyDF)
qplot(Type.of.feeding.interaction, log(Prey.mass/Predator.mass), data = MyDF, geom = "jitter")
qplot(Type.of.feeding.interaction, log(Prey.mass/Predator.mass), data = MyDF, geom = "boxplot")
qplot(log(Prey.mass/Predator.mass), data = MyDF, geom =  "histogram")
qplot(log(Prey.mass/Predator.mass), data = MyDF, geom =  "histogram", 
      fill = Type.of.feeding.interaction)
qplot(log(Prey.mass/Predator.mass), data = MyDF, geom =  "histogram", 
      fill = Type.of.feeding.interaction, binwidth = 1)
qplot(log(Prey.mass/Predator.mass), data = MyDF, geom =  "density", 
      fill = Type.of.feeding.interaction)
qplot(log(Prey.mass/Predator.mass), data = MyDF, geom =  "density", 
      fill = Type.of.feeding.interaction, 
      alpha = I(0.5))
qplot(log(Prey.mass/Predator.mass), data = MyDF, geom =  "density", 
      colour = Type.of.feeding.interaction)
qplot(log(Prey.mass/Predator.mass), facets = Type.of.feeding.interaction ~., data = MyDF, geom =  "density")
qplot(log(Prey.mass/Predator.mass), facets =  .~ Type.of.feeding.interaction, data = MyDF, geom =  "density")
qplot(log(Prey.mass/Predator.mass), facets = .~ Type.of.feeding.interaction + Location, 
      data = MyDF, geom =  "density")
qplot(Prey.mass, Predator.mass, data = MyDF, log="xy")
pdf("../results/MyFirst-ggplot2-Figure.pdf")
print(qplot(Prey.mass, Predator.mass, data = MyDF,log="xy",
    main = "Relation between predator and prey mass", 
    xlab = "log(Prey mass) (g)", 
    ylab = "log(Predator mass) (g)") + theme_bw())
dev.off()
qplot(Predator.lifestage, data = MyDF, geom = "bar")
qplot(Predator.lifestage, log(Prey.mass), data = MyDF, geom = "boxplot")
qplot(log(Predator.mass), data = MyDF, geom = "density")
qplot(log(Predator.mass), data = MyDF, geom = "histogram")
qplot(log(Predator.mass), log(Prey.mass), data = MyDF, geom = "point")
qplot(log(Predator.mass), log(Prey.mass), data = MyDF, geom = "smooth")
qplot(log(Predator.mass), log(Prey.mass), data = MyDF, geom = "smooth", method = "lm")
p <- ggplot(MyDF, aes(x = log(Predator.mass),
                y = log(Prey.mass),
                colour = Type.of.feeding.interaction))
p
p + geom_print()
p + geom_point()
q <- p + geom_point(size=I(2), shape=I(10)) + theme_bw()
q
q + theme(legend.position="none")
require(reshape2)
GenerateMatrix <- function(N){
    M <- matrix(runif(N*N),N,N)
    return(M)
}
M <- GenerateMatrix(10)
Melt <- melt(M)
p <- ggplot(Melt, aes(Var1, Var2, fill=value)) + geom_tile()
p
p + geom_tile(colour="black")
p + theme(legend.position="none")
p + theme(legend.position = "none", 
     panel.background = element_blank(),
     axis.ticks = element_blank(), 
     panel.grid.major = element_blank(),
     panel.grid.minor = element_blank(),
     axis.text.x = element_blank(),
     axis.title.x = element_blank(),
     axis.text.y = element_blank(),
     axis.title.y = element_blank())
p + scale_fill_continuous(low = "yellow", high = "darkgreen")
p + scale_fill_gradient2()
p + scale_fill_gradientn(colours = grey.colors(10))
p + scale_fill_gradientn(colours = rainbow(10))
p + scale_fill_gradientn(colours = c("red", "white", "blue"))
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
  npoints = 250
  a <- seq(0, 2*pi, length = npoints + 1)
  x <- hradius*cos(a)
  y <- vradius*sin(a)  
  return(data.frame(x = x, y = y))
} 
N <- 250 # Assign size of the matrix
M <- matrix(rnorm(N * N), N, N) # Build the matrix
eigvals <- eigen(M)$values # Find the eigenvalues
eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe
my_radius <- sqrt(N) # The radius of the circle is sqrt(N)
ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse
names(ellDF) <- c("Real", "Imaginary") # rename the columns
# Now plot
# Plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
  geom_point(shape = I(3)) +
  theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
source(Girko.R)
source("Girko.R")
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x + rnorm(length(x), mean = 0., sd = 2.5)
my_data <- data.frame(x = x, y = y)
my_lm <- summary(lm(y ~ x, data = my_data))
p <-  ggplot(my_data, aes(x = x, y = y,colour = abs(my_lm$residual))) +
  geom_point() +
  scale_colour_gradient(low = "black", high = "red") +
  theme(legend.position = "none") +
  scale_x_continuous(
    expression(alpha^2 * pi / beta * sqrt(Theta)))
p <- p + geom_abline(
  intercept = my_lm$coefficients[1][1],
  slope = my_lm$coefficients[2][1],
  colour = "red")
p <- p + geom_text(aes(x = 60, y = 0,
                       label = "sqrt(alpha) * 2* pi"), 
                       parse = TRUE, size = 6, 
                       colour = "blue")
p
source("plotLin.R")
q()
